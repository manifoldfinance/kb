"use strict";(self.webpackChunkmanifold_kb=self.webpackChunkmanifold_kb||[]).push([[4570],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return f}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=t.createContext({}),u=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(d.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),f=o,b=p["".concat(d,".").concat(f)]||p[f]||l[f]||i;return r?t.createElement(b,a(a({ref:n},c),{},{components:r})):t.createElement(b,a({ref:n},c))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=r[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2175:function(e,n,r){r.r(n),r.d(n,{assets:function(){return c},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return l}});var t=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={sidebar_position:3,id:"howto-send_bundle",title:"Sending a Bundle Transaction",description:"How to guide on Sending a Bundle Transaction to SecureRpc"},d=void 0,u={unversionedId:"How-To/howto-send_bundle",id:"How-To/howto-send_bundle",title:"Sending a Bundle Transaction",description:"How to guide on Sending a Bundle Transaction to SecureRpc",source:"@site/docs/How-To/sending-bundles.md",sourceDirName:"How-To",slug:"/How-To/howto-send_bundle",permalink:"/docs/How-To/howto-send_bundle",draft:!1,editUrl:"https://github.com/manifoldfinance/kb/tree/trunk/docs/How-To/sending-bundles.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"howto-send_bundle",title:"Sending a Bundle Transaction",description:"How to guide on Sending a Bundle Transaction to SecureRpc"},sidebar:"docsSidebar",previous:{title:"Sending a Private Transaction",permalink:"/docs/How-To/howto-send_private_tx"},next:{title:"Requesting eth_blockNumber using NodeJs",permalink:"/docs/How-To/howto-get_blokcNumber"}},c={},l=[],p={toc:l};function f(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { providers, Wallet } from "ethers.js";\nimport { FlashbotsBundleProvider } from "@flashbots/ethers-provider-bundle";\nconst provider = new providers.JsonRpcProvider({ url: ETHEREUM_RPC_URL });\n// Standard json rpc provider directly from ethers.js. For example you can use Infura, Alchemy, or your own node.\n\nconst authSigner = new Wallet("0x0000000000000000000000000000000000000000000000000000000000000000");\n\n// `authSigner` is an Ethereum private key that does NOT store funds and is NOT your bot\'s primary key.\n// This is an identifying key for signing payloads to establish reputation and whitelisting\n\nconst flashbotsProvider = await FlashbotsBundleProvider.create(provider, authSigner);\n// Flashbots provider requires passing in a standard provider and an auth signer\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const ethers = require("ethers.js");\nconst { FlashbotsBundleProvider } = require("@flashbots/ethers-provider-bundle");\nconst provider = new ethers.providers.JsonRpcProvider({\n    url: ETHEREUM_RPC_URL,\n});\n\nconst authSigner = new ethers.Wallet("0x2000000000000000000000000000000000000000000000000000000000000000");\nconst flashbotsProvider = await FlashbotsBundleProvider.create(provider, authSigner);\n\nconst signedBundle = await flashbotsProvider.signBundle([\n    {\n        signer: SOME_SIGNER_TO_SEND_FROM,\n        transaction: SOME_TRANSACTION_TO_SEND,\n    },\n]);\n\nconst bundleReceipt = await flashbotsProvider.sendRawBundle(signedBundle, TARGET_BLOCK_NUMBER);\n')))}f.isMDXComponent=!0}}]);