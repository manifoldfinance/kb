"use strict";(self.webpackChunkmanifold_kb=self.webpackChunkmanifold_kb||[]).push([[2682],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||s;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=p;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<s;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},940:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var a=t(7462),r=t(3366),s=(t(7294),t(3905)),l=["components"],o={id:"ref-mev-rpc",title:"MEV RPC methods",weight:3},i=void 0,c={unversionedId:"Rpc/ref-mev-rpc",id:"Rpc/ref-mev-rpc",title:"MEV RPC methods",description:"MEV RPC Methods",source:"@site/docs/Rpc/mev-rpc.md",sourceDirName:"Rpc",slug:"/Rpc/ref-mev-rpc",permalink:"/docs/Rpc/ref-mev-rpc",draft:!1,editUrl:"https://github.com/manifoldfinance/kb/tree/trunk/docs/Rpc/mev-rpc.md",tags:[],version:"current",frontMatter:{id:"ref-mev-rpc",title:"MEV RPC methods",weight:3},sidebar:"docsSidebar",previous:{title:"Error encoding and responses",permalink:"/docs/Rpc/ref-error-codes-rpc"},next:{title:"Supported RPC methods",permalink:"/docs/Rpc/ref-json-rpc"}},u={},d=[{value:"MEV RPC Methods",id:"mev-rpc-methods",level:2},{value:"eth_sendBundle",id:"eth_sendbundle",level:3},{value:"eth_callBundle",id:"eth_callbundle",level:3},{value:"flashbots_getUserStats",id:"flashbots_getuserstats",level:3},{value:"flashbots_getBundleStats",id:"flashbots_getbundlestats",level:3}],p={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"mev-rpc-methods"},"MEV RPC Methods"),(0,s.kt)("p",null,"These are flashbots-standardd interfaces as of v0.6. "),(0,s.kt)("h3",{id:"eth_sendbundle"},"eth_sendBundle"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ethSendBundle")," can be used to send your bundles to the relay. The ",(0,s.kt)("inlineCode",{parentName:"p"},"eth_sendBundle")," RPC has the following payload format:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "eth_sendBundle",\n  "params": [\n    {\n      txs,               // Array[String], A list of signed transactions to execute in an atomic bundle\n      blockNumber,       // String, a hex encoded block number for which this bundle is valid on\n      minTimestamp,      // (Optional) Number, the minimum timestamp for which this bundle is valid, in seconds since the unix epoch\n      maxTimestamp,      // (Optional) Number, the maximum timestamp for which this bundle is valid, in seconds since the unix epoch\n      revertingTxHashes, // (Optional) Array[String], A list of tx hashes that are allowed to revert\n    }\n  ]\n}\n')),(0,s.kt)("p",null,"example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "eth_sendBundle",\n  "params": [\n    { "txs": ["0x123abc...", "0x456def..."], "blockNumber": "0xb63dcd", "minTimestamp": 0, "maxTimestamp": 1615920932 }\n  ]\n}\n')),(0,s.kt)("p",null,"example response:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "jsonrpc": "2.0",\n  "id": "123",\n  "result": {\n    "bundleHash": "0x2228f5d8954ce31dc1601a8ba264dbd401bf1428388ce88238932815c5d6f23f"\n  }\n}\n')),(0,s.kt)("h3",{id:"eth_callbundle"},"eth_callBundle"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"eth_callBundle")," can be used to simulate a bundle against a specific block number, including simulating a bundle at the\ntop of the next block. The ",(0,s.kt)("inlineCode",{parentName:"p"},"eth_callBundle")," RPC has the following payload format:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "eth_callBundle",\n  "params": [\n    {\n      txs,               // Array[String], A list of signed transactions to execute in an atomic bundle\n      blockNumber,       // String, a hex encoded block number for which this bundle is valid on\n      stateBlockNumber,  // String, either a hex encoded number or a block tag for which state to base this simulation on. Can use "latest"\n      timestamp,         // (Optional) Number, the timestamp to use for this bundle simulation, in seconds since the unix epoch\n    }\n  ]\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"example:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "eth_callBundle",\n  "params": [\n    {\n      "txs": ["0x123abc...", "0x456def..."],\n      "blockNumber": "0xb63dcd",\n      "stateBlockNumber": "latest",\n      "timestamp": 1615920932\n    }\n  ]\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"example response:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": "123",\n  "result": {\n    "bundleGasPrice": "476190476193",\n    "bundleHash": "0x73b1e258c7a42fd0230b2fd05529c5d4b6fcb66c227783f8bece8aeacdd1db2e",\n    "coinbaseDiff": "20000000000126000",\n    "ethSentToCoinbase": "20000000000000000",\n    "gasFees": "126000",\n    "results": [\n      {\n        "coinbaseDiff": "10000000000063000",\n        "ethSentToCoinbase": "10000000000000000",\n        "fromAddress": "0x02A727155aeF8609c9f7F2179b2a1f560B39F5A0",\n        "gasFees": "63000",\n        "gasPrice": "476190476193",\n        "gasUsed": 21000,\n        "toAddress": "0x73625f59CAdc5009Cb458B751b3E7b6b48C06f2C",\n        "txHash": "0x669b4704a7d993a946cdd6e2f95233f308ce0c4649d2e04944e8299efcaa098a",\n        "value": "0x"\n      },\n      {\n        "coinbaseDiff": "10000000000063000",\n        "ethSentToCoinbase": "10000000000000000",\n        "fromAddress": "0x02A727155aeF8609c9f7F2179b2a1f560B39F5A0",\n        "gasFees": "63000",\n        "gasPrice": "476190476193",\n        "gasUsed": 21000,\n        "toAddress": "0x73625f59CAdc5009Cb458B751b3E7b6b48C06f2C",\n        "txHash": "0xa839ee83465657cac01adc1d50d96c1b586ed498120a84a64749c0034b4f19fa",\n        "value": "0x"\n      }\n    ],\n    "stateBlockNumber": 5221585,\n    "totalGasUsed": 42000\n  }\n}\n')),(0,s.kt)("h3",{id:"flashbots_getuserstats"},"flashbots_getUserStats"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"flashbots_getUserStats")," JSON-RPC method returns a quick summary of how a searcher is performing in the relay,\nincluding their ",(0,s.kt)("a",{parentName:"p",href:"/flashbots-auction/searchers/advanced/reputation"},"reputation-based priority"),". It is currently updated\nonce every hour and has the following payload format:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "flashbots_getUserStats",\n  "params": [\n      blockNumber, //String, a hex encoded recent block number, in order to prevent replay attacks. Must be within 20 blocks of the current chain tip.\n  ]\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"example response:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "is_high_priority": true,\n  "all_time_miner_payments": "1280749594841588639",\n  "all_time_gas_simulated": "30049470846",\n  "last_7d_miner_payments": "1280749594841588639",\n  "last_7d_gas_simulated": "30049470846",\n  "last_1d_miner_payments": "142305510537954293",\n  "last_1d_gas_simulated": "2731770076"\n}\n')),(0,s.kt)("p",null,"where"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"is_high_priority"),": boolean representing if this searcher has a high enough reputation to be in the high priority\nqueue"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"all_time_miner_payments"),": the total amount paid to miners over all time"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"all_time_gas_simulated"),": the total amount of gas simulated across all bundles submitted to the relay. This is the\nactual gas used in simulations, not gas limit")),(0,s.kt)("h3",{id:"flashbots_getbundlestats"},"flashbots_getBundleStats"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"flashbots_getBundleStats")," JSON-RPC method returns stats for a single bundle. You must provide a blockNumber and the\nbundleHash, and the signing address must be the same as the one who submitted the bundle."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "flashbots_getBundleStats",\n  "params": [\n    {\n      bundleHash,       // String, returned by the flashbots api when calling eth_sendBundle\n      blockNumber,      // String, a hex encoded block number\n    }\n  ]\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"example response:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "isSimulated": true,\n  "isSentToMiners": true,\n  "isHighPriority": true,\n  "simulatedAt": "2021-08-06T21:36:06.317Z",\n  "submittedAt": "2021-08-06T21:36:06.250Z",\n  "sentToMinersAt": "2021-08-06T21:36:06.343Z"\n}\n')))}m.isMDXComponent=!0}}]);