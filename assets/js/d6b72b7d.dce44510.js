"use strict";(self.webpackChunkmanifold_kb=self.webpackChunkmanifold_kb||[]).push([[4417],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=p(n),c=r,k=s["".concat(d,".").concat(c)]||s[c]||m[c]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},1106:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return d},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_position:1,id:"rpc-intro",title:"JSON RPC Overview",description:"Overview and introduction for Ethereum JSON RPC"},d=void 0,p={unversionedId:"Rpc/rpc-intro",id:"Rpc/rpc-intro",title:"JSON RPC Overview",description:"Overview and introduction for Ethereum JSON RPC",source:"@site/docs/Rpc/index.md",sourceDirName:"Rpc",slug:"/Rpc/",permalink:"/docs/Rpc/",draft:!1,editUrl:"https://github.com/manifoldfinance/kb/tree/trunk/docs/Rpc/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"rpc-intro",title:"JSON RPC Overview",description:"Overview and introduction for Ethereum JSON RPC"},sidebar:"docsSidebar",previous:{title:"RPC & API",permalink:"/docs/category/rpc--api"},next:{title:"DApp Error Support",permalink:"/docs/Rpc/rpc-dapp-support"}},u={},m=[{value:"JSON-RPC Conformance Reference",id:"json-rpc-conformance-reference",level:2},{value:"Validation and Types",id:"validation-and-types",level:3},{value:"<code>Quantity</code>",id:"quantity",level:3},{value:"<code>Data</code>",id:"data",level:3},{value:"What is the difference between <code>DATA</code> and <code>QUANTITY</code>?",id:"what-is-the-difference-between-data-and-quantity",level:2},{value:"<code>Block Identifier</code>",id:"block-identifier",level:3},{value:"Errors",id:"errors",level:2},{value:"Authorization Error Codes",id:"authorization-error-codes",level:3},{value:"Ethereum Error Codes",id:"ethereum-error-codes",level:3},{value:"Ethereum Generic Codes",id:"ethereum-generic-codes",level:4}],s={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"json-rpc-conformance-reference"},"JSON-RPC Conformance Reference"),(0,l.kt)("p",null,"Type and data information for validation and conformance."),(0,l.kt)("h3",{id:"validation-and-types"},"Validation and Types"),(0,l.kt)("p",null,"Below type description can also be found in ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1474"},"EIP-1474")),(0,l.kt)("h3",{id:"quantity"},(0,l.kt)("inlineCode",{parentName:"h3"},"Quantity")),(0,l.kt)("p",null,"Values of a field of ",(0,l.kt)("inlineCode",{parentName:"p"},"QUANTITY")," type ",(0,l.kt)("strong",{parentName:"p"},"MUST")," be encoded as a hexadecimal string with a ",(0,l.kt)("inlineCode",{parentName:"p"},"0x")," prefix and the leading 0s stripped (except for the case of encoding the value ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),") matching the regular expression"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"^0x(?:0|(?:[a-fA-F1-9][a-fA-F0-9]*))\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"Quantity")," value ",(0,l.kt)("strong",{parentName:"li"},"MUST")," be hex-encoded."),(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"Quantity")," value ",(0,l.kt)("strong",{parentName:"li"},"MUST"),' be "0x"-prefixed.'),(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"Quantity")," value ",(0,l.kt)("strong",{parentName:"li"},"MUST")," be expressed using the fewest possible hex digits per byte."),(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"Quantity")," value ",(0,l.kt)("strong",{parentName:"li"},"MUST"),' express zero as "0x0".')),(0,l.kt)("h3",{id:"data"},(0,l.kt)("inlineCode",{parentName:"h3"},"Data")),(0,l.kt)("p",null,"Values of a field of ",(0,l.kt)("inlineCode",{parentName:"p"},"DATA")," type ",(0,l.kt)("strong",{parentName:"p"},"MUST")," be encoded as a hexadecimal string with a ",(0,l.kt)("inlineCode",{parentName:"p"},"0x")," prefix matching the regular expression `"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"^0x(?:[a-fA-F0-9]{2})*\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"Data")," value ",(0,l.kt)("strong",{parentName:"li"},"MUST")," be hex-encoded."),(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"Data")," value ",(0,l.kt)("strong",{parentName:"li"},"MUST")," be \u201c0x\u201d-prefixed."),(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"Data")," value ",(0,l.kt)("strong",{parentName:"li"},"MUST")," be expressed using two hex digits per byte.")),(0,l.kt)("h2",{id:"what-is-the-difference-between-data-and-quantity"},"What is the difference between ",(0,l.kt)("inlineCode",{parentName:"h2"},"DATA")," and ",(0,l.kt)("inlineCode",{parentName:"h2"},"QUANTITY"),"?"),(0,l.kt)("p",null,"The difference between the types \u201c",(0,l.kt)("inlineCode",{parentName:"p"},"DATA"),"\u201d and \u201c",(0,l.kt)("inlineCode",{parentName:"p"},"QUANTITY"),"\u201d is that \u201c",(0,l.kt)("inlineCode",{parentName:"p"},"DATA"),"\u201d always comes specified with a required length (ex: 20 Bytes), so you'll need to make sure the string you pass in is the right length. In contrast, ",(0,l.kt)("inlineCode",{parentName:"p"},"QUANTITY")," does not have length requirements."),(0,l.kt)("p",null,"For example given a parameter type: \u201cDATA, 20 Bytes\u201d, a valid input would be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'"0x0000000000000000000000000000000000000003"\n')),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"note: every two hex characters make one byte, so that string is ",(0,l.kt)("inlineCode",{parentName:"em"},"0x")," followed by forty hex characters")),(0,l.kt)("p",null,"However, if this were a QUANTITY, a valid input would be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'"0x3"\n')),(0,l.kt)("h3",{id:"block-identifier"},(0,l.kt)("inlineCode",{parentName:"h3"},"Block Identifier")),(0,l.kt)("p",null,"Since there is no way to clearly distinguish between a ",(0,l.kt)("inlineCode",{parentName:"p"},"Data")," parameter and a ",(0,l.kt)("inlineCode",{parentName:"p"},"Quantity")," parameter, ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1898"},"EIP-1898")," provides a format to specify a block either using the block hash or block number. The block identifier is a JSON ",(0,l.kt)("inlineCode",{parentName:"p"},"object")," with the following fields:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Position")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Name")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Type")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0A")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"blockNumber")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Quantity")),(0,l.kt)("td",{parentName:"tr",align:null},"The block in the canonical chain with this number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0B")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"blockHash")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Data")),(0,l.kt)("td",{parentName:"tr",align:null},"The block uniquely identified by this hash. The blockNumber and blockHash properties are mutually exclusive; exactly one of them must be set.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"1B")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"requireCanonical")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"(optional) Whether to throw an error if the block is not in the canonical chain as described below. Only allowed in conjunction with the blockHash tag. Defaults to false.")))),(0,l.kt)("p",null,"If the block is not found, the callee SHOULD raise a JSON-RPC error (the recommended error code is ",(0,l.kt)("inlineCode",{parentName:"p"},"-32001: Resource not found"),". If the tag is ",(0,l.kt)("inlineCode",{parentName:"p"},"blockHash")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"requireCanonical")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", the callee ",(0,l.kt)("em",{parentName:"p"},"SHOULD")," additionally raise a JSON-RPC error if the block is not in the canonical chain (the recommended error code is ",(0,l.kt)("inlineCode",{parentName:"p"},"-32000: Invalid input")," and in any case should be different than the error code for the block not found case so that the caller can distinguish the cases). The block-not-found check ",(0,l.kt)("em",{parentName:"p"},"SHOULD")," take precedence over the block-is-canonical check, so that if the block is not found the callee raises block-not-found rather than block-not-canonical."),(0,l.kt)("h2",{id:"errors"},"Errors"),(0,l.kt)("p",null,"The list of error codes introduced by this specification can be found below."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Message"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-32700"),(0,l.kt)("td",{parentName:"tr",align:null},"Parse error"),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid JSON was received by the server.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-32600"),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid Request"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON sent is not a valid Request object.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-32601"),(0,l.kt)("td",{parentName:"tr",align:null},"Method not found"),(0,l.kt)("td",{parentName:"tr",align:null},"The method does not exist / is not available.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-32602"),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid params"),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid method parameter(s).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-32603"),(0,l.kt)("td",{parentName:"tr",align:null},"Internal error"),(0,l.kt)("td",{parentName:"tr",align:null},"Internal JSON-RPC error.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-32000"),(0,l.kt)("td",{parentName:"tr",align:null},"Server error"),(0,l.kt)("td",{parentName:"tr",align:null},"Generic client error while processing request.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-38001"),(0,l.kt)("td",{parentName:"tr",align:null},"Unknown payload"),(0,l.kt)("td",{parentName:"tr",align:null},"Payload does not exist / is not available.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-38002"),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid payload attributes"),(0,l.kt)("td",{parentName:"tr",align:null},"Payload attributes are invalid / inconsistent.")))),(0,l.kt)("p",null,"Each error returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," value, except ",(0,l.kt)("inlineCode",{parentName:"p"},"-32000")," which returns the ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," object with a ",(0,l.kt)("inlineCode",{parentName:"p"},"err")," member that explains the error encountered."),(0,l.kt)("h3",{id:"authorization-error-codes"},"Authorization Error Codes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Return message"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Unauthorized"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when some action is not authorized, e.g. sending from a locked account.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"Action not allowed"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when some action is not allowed, e.g. preventing an action, while another depending action is processing on, like sending again when a confirmation popup is shown to the user (?).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Execution error"),(0,l.kt)("td",{parentName:"tr",align:null},"Will contain a subset of custom errors in the data field. See below.")))),(0,l.kt)("h3",{id:"ethereum-error-codes"},"Ethereum Error Codes"),(0,l.kt)("p",null,"Custom error ",(0,l.kt)("inlineCode",{parentName:"p"},"3")," can contain custom error(s) to further explain what went wrong.",(0,l.kt)("br",{parentName:"p"}),"\n","They will be contained in the ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," field of the RPC error message as follows:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Return message"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"100"),(0,l.kt)("td",{parentName:"tr",align:null},"X doesn\u2019t exist"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when something which should be there is not found. (Doesn\u2019t apply to eth_getTransactionBy","_"," and eth_getBlock","_",". They return a success with value ",(0,l.kt)("inlineCode",{parentName:"td"},"null"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"101"),(0,l.kt)("td",{parentName:"tr",align:null},"Requires ether"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used for actions which require something else, e.g. gas or a value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"102"),(0,l.kt)("td",{parentName:"tr",align:null},"Gas too low"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when a to low value of gas was given.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"103"),(0,l.kt)("td",{parentName:"tr",align:null},"Gas limits exceeded"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when a limit is exceeded, e.g. for the gas limit in a block.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"104"),(0,l.kt)("td",{parentName:"tr",align:null},"Rejected"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when an action was rejected, e.g. because of its content (too long contract code, containing wrong characters ?, should differ from ",(0,l.kt)("inlineCode",{parentName:"td"},"-32602")," - Invalid params).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"105"),(0,l.kt)("td",{parentName:"tr",align:null},"Ether too low"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when a to low value of Ether was given.")))),(0,l.kt)("h4",{id:"ethereum-generic-codes"},"Ethereum Generic Codes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Return message"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"106"),(0,l.kt)("td",{parentName:"tr",align:null},"Timeout"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when an action timedout.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"107"),(0,l.kt)("td",{parentName:"tr",align:null},"Conflict"),(0,l.kt)("td",{parentName:"tr",align:null},"Should be used when an action conflicts with another (ongoing?) action.")))))}c.isMDXComponent=!0}}]);