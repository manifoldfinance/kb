"use strict";(self.webpackChunkmanifold_kb=self.webpackChunkmanifold_kb||[]).push([[8787],{3905:function(n,t,e){e.d(t,{Zo:function(){return l},kt:function(){return m}});var r=e(7294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function s(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?s(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):s(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function u(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},s=Object.keys(n);for(r=0;r<s.length;r++)e=s[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)e=s[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var o=r.createContext({}),f=function(n){var t=r.useContext(o),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},l=function(n){var t=f(n.components);return r.createElement(o.Provider,{value:t},n.children)},d={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,s=n.originalType,o=n.parentName,l=u(n,["components","mdxType","originalType","parentName"]),c=f(e),m=i,h=c["".concat(o,".").concat(m)]||c[m]||d[m]||s;return e?r.createElement(h,a(a({ref:t},l),{},{components:e})):r.createElement(h,a({ref:t},l))}));function m(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var s=e.length,a=new Array(s);a[0]=c;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=n,u.mdxType="string"==typeof n?n:i,a[1]=u;for(var f=2;f<s;f++)a[f]=e[f];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}c.displayName="MDXCreateElement"},7351:function(n,t,e){e.r(t),e.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return u},metadata:function(){return f},toc:function(){return d}});var r=e(7462),i=e(3366),s=(e(7294),e(3905)),a=["components"],u={},o="Uint512.sol",f={unversionedId:"Router/Math/Uint512",id:"Router/Math/Uint512",title:"Uint512.sol",description:"",source:"@site/docs/Router/Math/Uint512.md",sourceDirName:"Router/Math",slug:"/Router/Math/Uint512",permalink:"/docs/Router/Math/Uint512",draft:!1,editUrl:"https://github.com/manifoldfinance/kb/tree/trunk/docs/Router/Math/Uint512.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"TwoStepOwnable.sol",permalink:"/docs/Router/Math/TwoStepOwnable"},next:{title:"Permit Library",permalink:"/docs/Router/Permit/router-permit"}},l={},d=[],c={toc:d};function m(n){var t=n.components,e=(0,i.Z)(n,a);return(0,s.kt)("wrapper",(0,r.Z)({},c,e,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"uint512sol"},"Uint512.sol"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"/// @notice Calculates the product of two uint256\n    /// @dev Used the chinese remainder theoreme\n    /// @param a A uint256 representing the first factor.\n    /// @param b A uint256 representing the second factor.\n    /// @return r0 The result as an uint512. r0 contains the lower bits.\n    /// @return r1 The higher bits of the result.\n    function mul256x256(uint256 a, uint256 b) internal pure returns (uint256 r0, uint256 r1) {\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            r0 := mul(a, b)\n            r1 := sub(sub(mm, r0), lt(mm, r0))\n        }\n    }\n\n    /// @notice Calculates the sum of two uint512\n    /// @param a0 A uint256 representing the lower bits of the first addend.\n    /// @param a1 A uint256 representing the higher bits of the first addend.\n    /// @param b0 A uint256 representing the lower bits of the seccond addend.\n    /// @param b1 A uint256 representing the higher bits of the seccond addend.\n    /// @return r0 The result as an uint512. r0 contains the lower bits.\n    /// @return r1 The higher bits of the result.\n    function add512x512(\n        uint256 a0,\n        uint256 a1,\n        uint256 b0,\n        uint256 b1\n    ) internal pure returns (uint256 r0, uint256 r1) {\n        assembly {\n            r0 := add(a0, b0)\n            r1 := add(add(a1, b1), lt(r0, a0))\n        }\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return s The square root as an uint256.\n    function sqrt256(uint256 x) internal pure returns (uint256 s) {\n        if (x == 0) return 0;\n\n        assembly {\n            s := 1\n\n            let xAux := x\n\n            let cmp := or(\n                gt(xAux, 0x100000000000000000000000000000000),\n                eq(xAux, 0x100000000000000000000000000000000)\n            )\n            xAux := sar(mul(cmp, 128), xAux)\n            s := shl(mul(cmp, 64), s)\n\n            cmp := or(gt(xAux, 0x10000000000000000), eq(xAux, 0x10000000000000000))\n            xAux := sar(mul(cmp, 64), xAux)\n            s := shl(mul(cmp, 32), s)\n\n            cmp := or(gt(xAux, 0x100000000), eq(xAux, 0x100000000))\n            xAux := sar(mul(cmp, 32), xAux)\n            s := shl(mul(cmp, 16), s)\n\n            cmp := or(gt(xAux, 0x10000), eq(xAux, 0x10000))\n            xAux := sar(mul(cmp, 16), xAux)\n            s := shl(mul(cmp, 8), s)\n\n            cmp := or(gt(xAux, 0x100), eq(xAux, 0x100))\n            xAux := sar(mul(cmp, 8), xAux)\n            s := shl(mul(cmp, 4), s)\n\n            cmp := or(gt(xAux, 0x10), eq(xAux, 0x10))\n            xAux := sar(mul(cmp, 4), xAux)\n            s := shl(mul(cmp, 2), s)\n\n            s := shl(mul(or(gt(xAux, 0x8), eq(xAux, 0x8)), 2), s)\n        }\n\n        unchecked {\n            s = (s + x / s) >> 1;\n            s = (s + x / s) >> 1;\n            s = (s + x / s) >> 1;\n            s = (s + x / s) >> 1;\n            s = (s + x / s) >> 1;\n            s = (s + x / s) >> 1;\n            s = (s + x / s) >> 1;\n            uint256 roundedDownResult = x / s;\n            return s >= roundedDownResult ? roundedDownResult : s;\n        }\n    }\n\n    /// @notice Calculates the square root of a 512 bit unsigned integer, rounding down.\n    /// @dev Uses the Karatsuba Square Root method. See https://hal.inria.fr/inria-00072854/document for details.\n    /// @param a0 A uint256 representing the low bits of the input.\n    /// @param a1 A uint256 representing the high bits of the input.\n    /// @return s The square root as an uint256. Result has at most 256 bit.\n    function sqrt512(uint256 a0, uint256 a1) internal pure returns (uint256 s) {\n        // A simple 256 bit square root is sufficient\n        if (a1 == 0) return sqrt256(a0);\n\n        // The used algorithm has the pre-condition a1 >= 2**254\n        uint256 shift;\n\n        assembly {\n            let digits := mul(lt(a1, 0x100000000000000000000000000000000), 128)\n            a1 := shl(digits, a1)\n            shift := add(shift, digits)\n\n            digits := mul(lt(a1, 0x1000000000000000000000000000000000000000000000000), 64)\n            a1 := shl(digits, a1)\n            shift := add(shift, digits)\n\n            digits := mul(lt(a1, 0x100000000000000000000000000000000000000000000000000000000), 32)\n            a1 := shl(digits, a1)\n            shift := add(shift, digits)\n\n            digits := mul(\n                lt(a1, 0x1000000000000000000000000000000000000000000000000000000000000),\n                16\n            )\n            a1 := shl(digits, a1)\n            shift := add(shift, digits)\n\n            digits := mul(\n                lt(a1, 0x100000000000000000000000000000000000000000000000000000000000000),\n                8\n            )\n            a1 := shl(digits, a1)\n            shift := add(shift, digits)\n\n            digits := mul(\n                lt(a1, 0x1000000000000000000000000000000000000000000000000000000000000000),\n                4\n            )\n            a1 := shl(digits, a1)\n            shift := add(shift, digits)\n\n            digits := mul(\n                lt(a1, 0x4000000000000000000000000000000000000000000000000000000000000000),\n                2\n            )\n            a1 := shl(digits, a1)\n            shift := add(shift, digits)\n\n            a1 := or(a1, shr(sub(256, shift), a0))\n            a0 := shl(shift, a0)\n        }\n\n        uint256 sp = sqrt256(a1);\n        uint256 rp = a1 - (sp * sp);\n\n        uint256 nom;\n        uint256 denom;\n        uint256 u;\n        uint256 q;\n\n        assembly {\n            nom := or(shl(128, rp), shr(128, a0))\n            denom := shl(1, sp)\n            q := div(nom, denom)\n            u := mod(nom, denom)\n\n            // The nominator can be bigger than 2**256. We know that rp < (sp+1) * (sp+1). As sp can be\n            // at most floor(sqrt(2**256 - 1)) we can conclude that the nominator has at most 513 bits\n            // set. An expensive 512x256 bit division can be avoided by treating the bit at position 513 manually\n            let carry := shr(128, rp)\n            let x := mul(carry, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            q := add(q, div(x, denom))\n            u := add(u, add(carry, mod(x, denom)))\n            q := add(q, div(u, denom))\n            u := mod(u, denom)\n        }\n\n        unchecked {\n            s = (sp << 128) + q;\n\n            uint256 rl = ((u << 128) | (a0 & 0xffffffffffffffffffffffffffffffff));\n            uint256 rr = q * q;\n\n            if ((q >> 128) > (u >> 128) || (((q >> 128) == (u >> 128)) && rl < rr)) {\n                s = s - 1;\n            }\n\n            return s >> (shift >> 1);\n        }\n    }\n}\n")))}m.isMDXComponent=!0}}]);