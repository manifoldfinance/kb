"use strict";(self.webpackChunkmanifold_kb=self.webpackChunkmanifold_kb||[]).push([[1270],{3905:function(e,t,n){n.d(t,{Zo:function(){return f},kt:function(){return p}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),d=s(n),p=r,h=d["".concat(c,".").concat(p)]||d[p]||u[p]||a;return n?o.createElement(h,i(i({ref:t},f),{},{components:n})):o.createElement(h,i({ref:t},f))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9637:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"Finding the Safe Head"},c=void 0,s={unversionedId:"Block-Construction/Find-Safe-Head",id:"Block-Construction/Find-Safe-Head",title:"Finding the Safe Head",description:"How to find safe head",source:"@site/docs/Block-Construction/Find-Safe-Head.md",sourceDirName:"Block-Construction",slug:"/Block-Construction/Find-Safe-Head",permalink:"/docs/Block-Construction/Find-Safe-Head",draft:!1,editUrl:"https://github.com/manifoldfinance/kb/tree/trunk/docs/Block-Construction/Find-Safe-Head.md",tags:[],version:"current",frontMatter:{title:"Finding the Safe Head"},sidebar:"docsSidebar",previous:{title:"sync and the merge",permalink:"/docs/Block-Construction/Block-Sync"},next:{title:"Single Slot Finality",permalink:"/docs/Block-Construction/Single-Slot-Finality"}},f={},u=[{value:"How to find safe head",id:"how-to-find-safe-head",level:2}],d={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"how-to-find-safe-head"},"How to find safe head"),(0,a.kt)("p",null,"First, find latest justified epoch"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"For all later epochs except current epoch:"),(0,a.kt)("li",{parentName:"ol"},"Ensure at least 33% of target votes for this epoch\n2.a If any epoch fails, safe head is last justified block\n2.b From last justified epoch, for each slot, verify that it cannot be reorged"),(0,a.kt)("li",{parentName:"ol"},"Count all attestation for descendants of this slot. If it is an empty slot, attestations for non-empty descendants are counted fully and attestations as \u201cempty slot\u201d half"),(0,a.kt)("li",{parentName:"ol"},"The slot is safe if >50%, otherwise unsafe"),(0,a.kt)("li",{parentName:"ol"},"Return last safe block")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Attestations for empty slot only count half because they are only votes for previous block")),(0,a.kt)("p",null,"Always following the head of fork choice is not safe\nHowever, we can find a safe head that follows the latest head by 4s in normal circumstances\nUnder the assumption that the network is synchronous and >50% of stake is honest, safe head will never revert\nIt is best to expose this safe head by default, although the unsafe head should be made available as a user choice"))}p.isMDXComponent=!0}}]);